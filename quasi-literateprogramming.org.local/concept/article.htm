<article>
<h1>Concept</h1>
<p class='paragraph'>
Similar to "extract", "quasi" extracts sections of pre-formatted text from documentation and appends it to <i>target</i> text files.
Unlike "extract", rather than matching a supplied pattern, the <i>identifier</i> in the pre-formatted text section is used as the file path of the target file relative to a user supplied base directory.
</p>
<p class='paragraph'>
For example, this command would extract the following block of source code and append it to the file 'source/c/quasi.c':
</p>
<pre>
	quasi source source/mtx/quasi.mtx
</pre>
<pre>
	~c/quasi.c~
	int main( int argc, char** argv )
	{
		return 0;
	}
	~
</pre>
<p class='paragraph'>
The tool does sanitation of the filenames, ensuring that parent directory ('..') commands aren't included and therefore that output files remain under the specified base directory.
If the specified base directory already exists the tool will exit with an error, unless the '-f' flag is passed as the first command argument.
</p>
<pre>
	quasi -f source source/mtx/quasi.mtx
</pre>
<p class='paragraph'>
If the identifier of the pre-formatted block section is prefixed by an exclamation mark the file is truncated on opening.
It is advisable that when a file is truncated in this manner that the code fragment be a comment warning that the file is generated:
</p>
<pre>
	~!c/quasi.c~
	/*   !!!   Warning this file is auto-generated   !!!   */
	~
</pre>
<p class='paragraph'>
Quasi is implemented to process text files that use the MaxText text format [MaxText].
If code fragments are not appropriate for the output documentation they can be commented using the standard MaxText commenting character, causing them to be ignored by MaxText, but still be processed by Quasi.
This is useful for hiding code comments, or perhaps includes.
</p>
<pre>
	!
	Include various standard includes.

	~!c/quasi.c!~
	#include &lt;stdio.h&gt;
	#include &lt;stdlib.h&gt;
	#include &lt;string.h&gt;
	~
	!
</pre>
<p class='paragraph'>
The key difference between literate programming tools and Quasi is that Quasi forces the programmer to construct all target source files in a linear fashion, however, separate files may still be constructed in parallel.
It is thought that an additional benefit of this approach is that it will enable programmers to better modularise their software, as there is very little overhead in creating new files.
</p>
</article>
